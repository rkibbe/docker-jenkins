ext {
    dockerImageName = "ticketfly/$name"
    dockerTag = version
    jenkinsVersion = version
    jenkinsPort = 8080
    jenkinsHost = 'localhost'
    jenkinsURL = project.hasProperty('jenkinsURL') ? jenkinsURL : "http://$jenkinsHost:$jenkinsPort"
    dockerDetached = project.hasProperty('dockerDetached') ? dockerDetached : 'false'
}

apply plugin: 'groovy'

repositories {
    mavenCentral()
    jcenter()
    maven { url 'http://repo.jenkins-ci.org/releases/' }
}

configurations {
    integrationCompile.extendsFrom testCompile
}

sourceSets {
    integration {
        groovy {
            srcDir file('src/integration/groovy')
        }
    }
}

dependencies {
    testCompile 'org.codehaus.groovy:groovy-all:2.4.7'
    testCompile 'org.spockframework:spock-core:1.1-groovy-2.4-rc-3'
    testCompile "org.jenkins-ci.main:jenkins-core:$jenkinsVersion"
    testCompile 'org.jenkins-ci.plugins:job-dsl-core:1.54'
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.2.1'
}

task dockerRun(type: Exec) {
    group 'Docker'
    description "Run the jenkins docker container locally, use the 'latest' tag"
    commandLine 'docker'
    doFirst {
        args = ['run', dockerDetached == 'true' ? '-d' : '--rm', '--name', 'jenkins', '-p', "$jenkinsPort:$jenkinsPort", '-p', '50000:50000', '-v', '/var/jenkins_home', "$dockerImageName"]
    }
    doLast {
        try {
            if (dockerDetached == 'true') {
                waitForHTTPResponse(jenkinsURL, 200)
                println "Jenkins server started at $jenkinsURL"
            }
        } catch (e) {
            throw new GradleException("Could not connect to $jenkinsURL", e)
        }
    }
}

@groovy.transform.TimedInterrupt(120L)
def void waitForHTTPResponse(String url, int responseCode) {
    println "Waiting for HTTP response $responseCode for '$url'"
    boolean isConnected = false
    while (!isConnected) {
        try {
            isConnected = url.toURL().openConnection().responseCode == responseCode
        } catch (any) {
        }
        Thread.sleep(500)
    }
}

task dockerStop(type: Exec) {
    group 'Docker'
    description 'Stop the jenkins docker container'
    commandLine 'docker'
    args = ['rm', '-f', '-v', 'jenkins']
}

task dockerStatus(type: Exec) {
    group 'Docker'
    description 'Display the process status of jenkins docker container'
    commandLine 'docker'
    args = ['ps', '-a', '-f', "name=jenkins"]
}

task dockerBuild(type: Exec) {
    group 'Docker'
    description "Build the docker image, tag as current version and 'as latest'."
    commandLine 'docker'
    args = ['build', '-t', "$dockerImageName:$dockerTag", '-t', "$dockerImageName:latest", "."]
}

task dockerPush(type: Exec) {
    group 'Docker'
    description 'Push the docker image with the current tag'
    commandLine 'docker'
    args = ['push', "$dockerImageName:$dockerTag"]
}

task integration(type: Test) {
    group 'Test'
    testClassesDir = sourceSets.integration.output.classesDir
    classpath = sourceSets.integration.runtimeClasspath
    systemProperties = [jenkinsURL: jenkinsURL]
    testLogging {
        events 'passed', 'skipped', 'failed'
    }
    outputs.upToDateWhen { false }
}

gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(runIntegration)) {
        dockerDetached = 'true'
    }
}

task runIntegration() {
    group 'Test'
    description 'Run in that order: dockerBuild, dockerRun, integration, dockerStop'
    doFirst{
        dockerBuild.execute()
        dockerRun.execute()
        integration.execute()
    }
}
runIntegration.finalizedBy dockerStop
